#include <iostream>
#include <list>
#include <iterator>
#include <cstring>
#include <unistd.h>
#include <signal.h>
#include <errno.h>
#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <assert.h>
#include <fcntl.h>
#include <assert.h>
#include <stdlib.h>

/*Assignment 5
Due date: Sunday, July 29, 2018, 11:55 PM
Maximum number of files: 1
Type of work: Individual work

Extend assignment three to include system calls. Create two pipes between every child process and the CPU process. You'll want to add the two pipes to each child's PCB. After making a request via a pipe, have the child send a SIGTRAP to the CPU process; you will need to create a SIGTRAP handler to receive requests via the pipes and act on those requests. Have the CPU read end non-blocking as you will need to poll to see which child made the request. Please see the pipe.cc for a piping example.


Use the first byte in the pipe to designate the kernel call:
    1 - return the system time
    2 - return the calling process' info
    3 - return the list of all processes
    4 - output to stdout until null found

Please turn in two programs: CPU.cc and child.cc. Use child.cc to demonstrate each of your system calls.
*/

#define READ 0
#define WRITE 1
#define SEND 3
#define RECEIVE 4
#define NUM_SECONDS 20
#define ever ;;

#define assertsyscall(x, y) if(!((x) y)){int err = errno; \
    fprintf(stderr, "In file %s at line %d: ", __FILE__, __LINE__); \
        perror(#x); exit(err);}


// http://man7.org/linux/man-pages/man7/signal-safety.7.html

#define WRITES(a) { const char *foo = a; write(1, foo, strlen(foo)); fflush(stdout);}
#define WRITEI(a) { char buf[7]; assert(eye2eh(a, buf, 7, 10) != -1); WRITES(buf); }

#ifdef EBUG
#define FandL WRITES("in "); WRITES(__FILE__); WRITES(" at "); WRITEI(__LINE__); WRITES(" ");

#   define dmess(a) FandL; WRITES(" "); WRITES(a); WRITES("\n");
#   define dprint(a) FandL; WRITES(#a); WRITES(" = "); WRITES(a); WRITES("\n");
#   define dprintt(a,b) FandL WRITES(a); WRITES(" "); WRITES(#b); \
        WRITES(" = "); WRITEI(b); WRITES("\n");

#else
#   define dmess(a)
#   define dprint(a)
#   define dprintt(a,b)
#endif

using namespace std;

enum STATE { NEW, RUNNING, WAITING, READY, TERMINATED };

struct PCB
{
    STATE state;
    const char *name;   // name of the executable
    int pid;            // process id from fork();
    int ppid;           // parent process id
    int interrupts;     // number of times interrupted
    int switches;       // may be < interrupts
    int started;        // the time this process started
	
	//append PCB to include 2 pipes.
	int child2parent[2];
	int parent2child[2];
	int fl;

};

PCB *running;
PCB *idle;
PCB *check_pipe;

// http://www.cplusplus.com/reference/list/list/
list<PCB *> processes;

int sys_time;
int timer;
struct sigaction alarm_handler;
struct sigaction child_handler;
struct sigaction trap_handler;

/*
** Async-safe integer to a string. i is assumed to be positive. The number
** of characters converted is returned; -1 will be returned if bufsize is
** less than one or if the string isn't long enough to hold the entire
** number. Numbers are right justified. The base must be between 2 and 16;
** otherwise the string is filled with spaces and -1 is returned.
*/
int eye2eh(int i, char *buf, int bufsize, int base)
{
    if(bufsize < 1) return(-1);
    buf[bufsize-1] = '\0';
    if(bufsize == 1) return(0);
    if(base < 2 || base > 16)
    {
        for(int j = bufsize-2; j >= 0; j--)
        {
            buf[j] = ' ';
        }
        return(-1);
    }

    int count = 0;
    const char *digits = "0123456789ABCDEF";
    for (int j = bufsize-2; j >= 0; j--)
    {
        if (i == 0)
        {
            buf[j] = ' ';
        }
        else
        {
            buf[j] = digits[i%base];
            i = i/base;
            count++;
        }
    }
    if (i != 0)
        return(-1);
    return(count);
}

/*
** a signal handler for those signals delivered to this process, but
** not already handled.
*/
void bad(int signum) { WRITES("bad signal: "); WRITEI(signum); WRITES("\n"); }

// c++decl> declare ISV as array 32 of pointer to function(int) returning void
void(*ISV[32])(int) = {
/*       00   01   02   03   04   05   06   07   08   09 */
/*  0 */ bad, bad, bad, bad, bad, bad, bad, bad, bad, bad,
/* 10 */ bad, bad, bad, bad, bad, bad, bad, bad, bad, bad,
/* 20 */ bad, bad, bad, bad, bad, bad, bad, bad, bad, bad,
/* 30 */ bad, bad
};

// pipe request handler
void pipe_request()
{
	for(int i = 0; i < processes.size(); i++)
	{
		
	}
}

/*
** stop the running process and index into the ISV to call the ISR
*/
void ISR (int signum)
{
    if (signum != (SIGCHLD))
    {	
        assertsyscall (kill (running->pid, SIGSTOP), == 0);
        WRITES("In ISR stopped: ");
        WRITEI(running->pid);
        WRITES("\n");
        running->interrupts++;      // remove me
        running->state = READY;     // remove me
    }

	if(signum == SIGTRAP)
	{
		pipe_request();
	}

    ISV[signum](signum);
}

/*
** an overloaded output operator that prints a PCB
*/
ostream& operator <<(ostream &os, struct PCB *pcb)
{
    os << "state:        " << pcb->state << endl;
    os << "name:         " << pcb->name << endl;
    os << "pid:          " << pcb->pid << endl;
    os << "ppid:         " << pcb->ppid << endl;
    os << "interrupts:   " << pcb->interrupts << endl;
    os << "switches:     " << pcb->switches << endl;
    os << "started:      " << pcb->started << endl;
    return(os);
}

/*
** an overloaded output operator that prints a list of PCBs
*/
ostream& operator <<(ostream &os, list<PCB *> which)
{
    list<PCB *>::iterator PCB_iter;
    for(PCB_iter = which.begin(); PCB_iter != which.end(); PCB_iter++)
    {
        os <<(*PCB_iter);
    }
    return(os);
}

/*
**  send signal to process pid every interval for number of times.
*/
void send_signals(int signal, int pid, int interval, int number)
{
    dprintt("at beginning of send_signals", getpid());

    for(int i = 1; i <= number; i++)
    {
        assertsyscall(sleep(interval), == 0);
        dprintt("sending", signal);
        dprintt("to", pid);
        assertsyscall(kill(pid, signal), == 0)
    }

    dmess("at end of send_signals");
}

void create_handler(int signum, struct sigaction action, void(*handler)(int))
{
    action.sa_handler = handler;

    /*
    **  SA_NOCLDSTOP
    **  If  signum  is  SIGCHLD, do not receive notification when
    **  child processes stop(i.e., when child processes  receive
    **  one of SIGSTOP, SIGTSTP, SIGTTIN or SIGTTOU).
    */
    if(signum == SIGCHLD)
    {
        action.sa_flags = SA_NOCLDSTOP | SA_RESTART;
    }

    else
    {
        action.sa_flags =  SA_RESTART;
    }

    assertsyscall(sigemptyset(&action.sa_mask), == 0)
    assertsyscall(sigaction(signum, &action, NULL), == 0);
}

void scheduler (int signum)
{
    WRITES("---- entering scheduler\n");
    assert(signum == SIGALRM);
    // start remove me
    sys_time++;

    bool found_one = false;
    for (int i = 1; i <= processes.size(); i++)
    {
        PCB *front = processes.front();
        processes.pop_front();
        processes.push_back(front);

        if (front->state == NEW)
        {
            WRITES ("starting: ");
            WRITES (front->name);
            WRITES("\n");

            front->state = RUNNING;
            front->ppid = getpid();
            front->interrupts = 0;
            front->switches = 0;
            front->started = sys_time;
			
			assertsyscall(pipe(front->child2parent), == 0);
			assertsyscall(pipe(front->parent2child), == 0);
			assertsyscall((front->fl = fcntl(front->child2parent[READ], F_GETFL)), != -1);
			assertsyscall(fcntl(front->child2parent[READ], F_SETFL, front->fl | O_NONBLOCK), == 0);
			
            running = front;

            assertsyscall((front->pid = fork()), >= 0);
            if (front->pid == 0)
            {

				//		close unusable ends of pipes
				assertsyscall(close(front->child2parent[READ]), == 0);
				assertsyscall(close(front->parent2child[WRITE]), == 0);
				//		implement dup2 to establish communication line of child processes
				assertsyscall(dup2(front->child2parent[WRITE], SEND), != -1);
				assertsyscall(dup2(front->parent2child[READ], RECEIVE), != -1);
				
                execl(front->name, front->name, NULL);
                perror("execl");
                continue;
            }
            found_one = true;
            break;
        }
        else if (front->state == READY)
        {
            WRITES ("continuing");
            WRITEI (front->pid);
            WRITES("\n");

            front->state = RUNNING;
            running = front;
            assertsyscall (kill (front->pid, SIGCONT), == 0);
            found_one = true;
            break;
        }
    }

    if (!found_one)
    {
    // end remove me
        WRITES ("continuing idle\n");
        running = idle;
        idle->state = RUNNING;
        assertsyscall (kill (idle->pid, SIGCONT), == 0);
    }   // remove me

    WRITES ("---- leaving scheduler\n");
}

void process_done (int signum)
{
    WRITES ("---- entering process_done\n");
    assert (signum == SIGCHLD);

    // start remove me

    for (int i = 0; i <= processes.size(); i++)
    {
        int status, cpid;
        assertsyscall((cpid = waitpid (-1, &status, WNOHANG)), >= 0);

        if (cpid == 0)
        {
            break;
        }
        else if (cpid == timer)
        {
    // end remove me
            WRITES ("timer died, cleaning up and killing everything\n");
            delete(idle);
            assertsyscall(kill(0, SIGTERM), != 0);
    // start remove me
        }
        else
        {
            WRITES ("process exited:\n");
            list<PCB *>::iterator PCB_iter;
            for (PCB_iter = processes.begin();
                PCB_iter != processes.end();
                PCB_iter++)
            {
                if ((*PCB_iter)->pid == cpid)
                {
                    WRITES ((*PCB_iter)->name); WRITES("\n");
                    WRITES ("pid:        ");
                    WRITEI ((*PCB_iter)->pid); WRITES("\n");
                    WRITES ("interrupts: ");
                    WRITEI ((*PCB_iter)->interrupts); WRITES("\n");
                    WRITES ("switches:   ");
                    WRITEI ((*PCB_iter)->switches); WRITES("\n");
                    WRITES ("start:      ");
                    WRITEI ((*PCB_iter)->started); WRITES("\n");
                    (*PCB_iter)->state = TERMINATED;
                }
            }
        }
    }

    WRITES ("continuing idle\n");
    running = idle;
    idle->state = RUNNING;
    assertsyscall (kill (idle->pid, SIGCONT), == 0);
    // end remove me

    WRITES ("---- leaving process_done\n");
}

/*
** set up the "hardware"
*/
void boot()
{
    sys_time = 0;

    ISV[SIGALRM] = scheduler;
    ISV[SIGCHLD] = process_done;
	// ISV to take sigtrap
	//ISV[SIGTRAP] = pipe_request;
    create_handler(SIGALRM, alarm_handler, ISR);
    create_handler(SIGCHLD, child_handler, ISR);
	//add handler for sigtrap
	create_handler(SIGTRAP, trap_handler, ISR);

    // start up clock interrupt
    assertsyscall((timer = fork()), >= 0);
    if (timer == 0)
    {
        send_signals(SIGALRM, getppid(), 1, NUM_SECONDS);
        exit(0);
    }
}

void create_idle()
{
    idle = new(PCB);
    idle->state = READY;
    idle->name = "IDLE";
    idle->ppid = getpid();
    idle->interrupts = 0;
    idle->switches = 0;
    idle->started = sys_time;

    assertsyscall((idle->pid = fork()), != -1);
    if(idle->pid == 0)
    {
        pause();
        perror("pause in create_idle");
        exit(0);
    }
}

int main(int argc, char **argv)
{
    // start remove me
    for (int i = 1; i < argc; i++)
    {
        PCB *new_proc = new (PCB);
        new_proc->state = NEW;
        new_proc->name = argv[i];
        new_proc->pid = 0;
        new_proc->ppid = 0;
        new_proc->interrupts = 0;
        new_proc->switches = 0;
        new_proc->started = 0;
        processes.push_back (new_proc);
    }
    // end remove me

    boot();
    create_idle();
    running = idle;

    for(ever) {
        pause();
    }
}
