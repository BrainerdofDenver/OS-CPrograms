//http://www.gnu.org/software/libc/manual/html_node/Sigaction-Function-Example.html

#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <errno.h>
#include <stdlib.h>
#include <stdio.h>

void handler (int signum) {
  if (signum == 01) {printf("\nFirst signal recieved");}
  else if (signum == 10) {printf("\nSecond signal recieved");}
//  else if 
  }


int main( int argc, char *argv[]){
  int                          error_number, status;
  pid_t                        parent_id, child_id;
  struct sigaction     	       action;
  struct sigaction             *s_action = &action;
  
  parent_id = getpid();
 
  s_action->sa_handler = handler;
  error_number = sigemptyset (&action.sa_mask);
  if (error_number < 0){
    printf ("\nError in call: sigemptyset");
    perror("sigemptyset");
    exit (EXIT_FAILURE);
    }
  s_action->sa_flags = SA_RESTART;
  
  child_id = fork();
  if (child_id < 0){
      perror("fork");
      printf("\nChild is stillborn");
      exit(EXIT_FAILURE);
  }
  else if(child_id == 0){
	child_id = getpid();

	printf("\nChild PID: %d\n", child_id);
	printf("\nParent PID: %d\n", parent_id);
	printf("\nCall successful... ");
	execl("./child","child",'\0','\0');
	}
	else{
		parent_id = waitpid(child_id, &status, WNOHANG);
		if(parent_id < 0){
			printf("\nWait failed");
			perror("waitpid");
			exit(EXIT_FAILURE);
		}
	}
  
  return 0;
}
